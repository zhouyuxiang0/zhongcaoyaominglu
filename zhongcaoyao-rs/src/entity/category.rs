//! SeaORM Entity. Generated by sea-orm-codegen 0.8.0

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Deserialize, Serialize)]
#[sea_orm(table_name = "category")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub name: String,
    #[sea_orm(column_name = "parentId")]
    pub parent_id: Option<i32>,
    #[sea_orm(column_name = "dateCreate_time")]
    pub date_create_time: DateTime,
    #[sea_orm(column_name = "dateUpdate_time")]
    pub date_update_time: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "Entity",
        from = "Column::ParentId",
        to = "Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    SelfRef,
    #[sea_orm(has_one = "super::category_bg_img::Entity")]
    CategoryBgImg,
    #[sea_orm(has_many = "super::chinese_medicine::Entity")]
    ChineseMedicine,
}

impl Related<super::category_bg_img::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::CategoryBgImg.def()
    }
}

impl Related<super::chinese_medicine::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ChineseMedicine.def()
    }
}

pub struct SelfRefLink;

impl Linked for SelfRefLink {
    type FromEntity = Entity;
    type ToEntity = Entity;
    fn link(&self) -> Vec<RelationDef> {
        vec![Relation::SelfRef.def()]
    }
}

impl ActiveModelBehavior for ActiveModel {}
